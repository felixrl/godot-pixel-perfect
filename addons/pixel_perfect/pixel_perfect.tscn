[gd_scene load_steps=9 format=3 uid="uid://enxcgk81l2t0"]

[ext_resource type="Script" uid="uid://cxwvt3y0sh7ce" path="res://addons/pixel_perfect/scripts/pixel_perfect_node.gd" id="1_m0evy"]
[ext_resource type="Texture2D" uid="uid://c0fmpw5q3hv5d" path="res://addons/pixel_perfect/demo_palettes/bit_monitor.png" id="2_alsv2"]
[ext_resource type="Script" uid="uid://be84xsn4o103x" path="res://addons/pixel_perfect/scripts/pixel_perfect_rect.gd" id="3_yq260"]
[ext_resource type="Shader" uid="uid://beh7vuyg3u120" path="res://addons/pixel_perfect/pixel_perfect_palette/shaders/palette_lookup.gdshader" id="6_aylyp"]
[ext_resource type="Texture2D" uid="uid://drvl0ebe6itye" path="res://addons/pixel_perfect/demo_palettes/berry-shake-32x.png" id="7_mu8cc"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_gyg3d"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_mt8b2"]

[sub_resource type="GDScript" id="GDScript_eq6pj"]
script/source = "class_name PaletteNode
extends Node

enum DistanceFunction {
	EUCLIDEAN,
	CIELAB
}

@export var rect: PixelPerfectScreen

@export var bake_palette := false

@export var palette_texture: Texture2D
@export var distance_function: DistanceFunction
@export var accuracy_scale: int = 128

@export var palette_shader: Shader

var palette
var lookup_texture

func _ready() -> void:
	palette = _generate_palette_from_texture(palette_texture)
	lookup_texture = _get_lookup_texture(distance_function)
	_assign_lookup_texture(rect.get_material(), lookup_texture, accuracy_scale)

## Get the lookup texture specified by the distance function
func _get_lookup_texture(function: DistanceFunction) -> ImageTexture:
	match function:
		DistanceFunction.EUCLIDEAN:
			return PaletteLookupGenerator.get_euclidian_lookup_texture(palette, accuracy_scale)
		DistanceFunction.CIELAB:
			return PaletteLookupGenerator.get_cielab_lookup_texture(palette, accuracy_scale)
	
	push_error(\"Invalid distance function in palette node\")
	return null

## Generate a color palette from a texture by accumulating all unique colors
func _generate_palette_from_texture(source_texture: Texture2D):
	# Get image
	var data = source_texture.get_image()
	# Get dimensions
	var dimensions := Vector2i(source_texture.get_width(), source_texture.get_height())

	var unique_colors = []
	for x in range(dimensions.x):
		for y in range(dimensions.y):
			var color = data.get_pixel(x, y)
			# Skip duplicates
			if color in unique_colors:
				continue
			unique_colors.append(color)
	return unique_colors

## Assign the lookup texture shader and corresponding metadata to a palette material
func _assign_lookup_texture(shader_material: ShaderMaterial, lookup_texture: Texture2D, accuracy_scale: int):
	shader_material.set_shader(palette_shader)
	shader_material.set_shader_parameter(\"lookup_texture\", lookup_texture)
	shader_material.set_shader_parameter(\"texture_size\", Vector2(lookup_texture.get_width(), lookup_texture.get_height()))
	shader_material.set_shader_parameter(\"accuracy_scale\", accuracy_scale)
"

[node name="PixelPerfect" type="CanvasLayer"]
script = ExtResource("1_m0evy")
src_palette_texture = ExtResource("2_alsv2")

[node name="Bg" type="ColorRect" parent="."]
visible = false
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -10000.0
offset_top = -10000.0
offset_right = 10000.0
offset_bottom = 10000.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="TextureRect" type="TextureRect" parent="."]
texture_filter = 1
material = SubResource("ShaderMaterial_gyg3d")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -256.0
offset_top = -144.0
offset_right = 256.0
offset_bottom = 144.0
grow_horizontal = 2
grow_vertical = 2
stretch_mode = 3
script = ExtResource("3_yq260")

[node name="Area2D" type="Area2D" parent="TextureRect"]

[node name="CollisionShape2D" type="CollisionShape2D" parent="TextureRect/Area2D"]
shape = SubResource("RectangleShape2D_mt8b2")

[node name="Node" type="Node" parent="." node_paths=PackedStringArray("rect")]
script = SubResource("GDScript_eq6pj")
rect = NodePath("../TextureRect")
palette_texture = ExtResource("7_mu8cc")
distance_function = 1
palette_shader = ExtResource("6_aylyp")

[connection signal="mouse_entered" from="TextureRect" to="TextureRect" method="_on_mouse_entered"]
[connection signal="mouse_exited" from="TextureRect" to="TextureRect" method="_on_mouse_exited"]
[connection signal="input_event" from="TextureRect/Area2D" to="TextureRect" method="_on_area_2d_input_event"]
